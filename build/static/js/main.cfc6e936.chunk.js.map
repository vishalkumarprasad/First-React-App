{"version":3,"sources":["toggle.js","App.js","reportWebVitals.js","index.js"],"names":["DARK_CLASS","DarkToggle","systemPrefersDark","useMediaQuery","query","undefined","prefersDark","setIsDark","useState","isDark","useEffect","document","documentElement","classList","add","remove","checked","className","style","marginBottom","onChange","size","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wOAIMA,EAAa,OAqCJC,EAnCI,WACf,IAAMC,EAAoBC,wBACtB,CACIC,MAAO,qCAEXC,GACA,SAAAC,GACIC,EAAUD,MAPG,EAWOE,mBAASN,GAXhB,mBAWdO,EAXc,KAWNF,EAXM,KAwBrB,OARAG,qBAAU,WACFD,EACAE,SAASC,gBAAgBC,UAAUC,IAAId,GAEvCW,SAASC,gBAAgBC,UAAUE,OAAOf,KAE/C,CAACS,IAGA,cAAC,iBAAD,CACIO,QAASP,EACTQ,UAAU,SACVC,MAAO,CAAEC,aAAc,QACvBC,SAjBe,SAACJ,GACpBT,EAAUS,IAiBNK,KAAM,MClBHC,MAff,WAGE,OACE,qBAAKL,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IACA,mBAAGA,UAAU,OAAb,wCCEOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASwB,eAAe,SAM1BZ,M","file":"static/js/main.cfc6e936.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useMediaQuery } from \"react-responsive\";\nimport { DarkModeSwitch } from 'react-toggle-dark-mode';\n\nconst DARK_CLASS = \"dark\";\n\nconst DarkToggle = () => {\n    const systemPrefersDark = useMediaQuery(\n        {\n            query: \"(prefers-color-scheme: dark)\"\n        },\n        undefined,\n        prefersDark => {\n            setIsDark(prefersDark);\n        }\n    );\n\n    const [isDark, setIsDark] = useState(systemPrefersDark);\n    const toggleDarkMode = (checked: boolean) => {\n        setIsDark(checked);\n      };\n\n    useEffect(() => {\n        if (isDark) {\n            document.documentElement.classList.add(DARK_CLASS)\n        } else {\n            document.documentElement.classList.remove(DARK_CLASS)\n        }\n    }, [isDark]);\n\n    return (\n        <DarkModeSwitch\n            checked={isDark}\n            className=\"button\"\n            style={{ marginBottom: '2rem' }}\n            onChange={toggleDarkMode}\n            size={30}\n        />\n    );\n};\n\nexport default DarkToggle;","import './App.css';\nimport DarkToggle from './toggle'\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <DarkToggle />\n        <p className=\"type\">\n          Hi, My name is V K P\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}