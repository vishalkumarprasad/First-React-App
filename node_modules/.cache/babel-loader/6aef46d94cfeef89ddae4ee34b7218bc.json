{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nvar reactSpring = require('react-spring');\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar defaultProperties = {\n  dark: {\n    circle: {\n      r: 9\n    },\n    mask: {\n      cx: '50%',\n      cy: '23%'\n    },\n    svg: {\n      transform: 'rotate(40deg)'\n    },\n    lines: {\n      opacity: 0\n    }\n  },\n  light: {\n    circle: {\n      r: 5\n    },\n    mask: {\n      cx: '100%',\n      cy: '0%'\n    },\n    svg: {\n      transform: 'rotate(90deg)'\n    },\n    lines: {\n      opacity: 1\n    }\n  },\n  springConfig: {\n    mass: 4,\n    tension: 250,\n    friction: 35\n  }\n};\nvar REACT_TOGGLE_DARK_MODE_GLOBAL_ID = 0;\n\nvar DarkModeSwitch = function DarkModeSwitch(_ref) {\n  var onChange = _ref.onChange,\n      _ref$checked = _ref.checked,\n      checked = _ref$checked === void 0 ? false : _ref$checked,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      _ref$animationPropert = _ref.animationProperties,\n      animationProperties = _ref$animationPropert === void 0 ? defaultProperties : _ref$animationPropert,\n      _ref$moonColor = _ref.moonColor,\n      moonColor = _ref$moonColor === void 0 ? 'white' : _ref$moonColor,\n      _ref$sunColor = _ref.sunColor,\n      sunColor = _ref$sunColor === void 0 ? 'black' : _ref$sunColor,\n      style = _ref.style,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onChange\", \"children\", \"checked\", \"size\", \"animationProperties\", \"moonColor\", \"sunColor\", \"style\"]);\n\n  var _React$useState = React.useState(0),\n      id = _React$useState[0],\n      setId = _React$useState[1];\n\n  React.useEffect(function () {\n    REACT_TOGGLE_DARK_MODE_GLOBAL_ID += 1;\n    setId(REACT_TOGGLE_DARK_MODE_GLOBAL_ID);\n  }, [setId]);\n  var properties = React.useMemo(function () {\n    if (animationProperties !== defaultProperties) {\n      return Object.assign(defaultProperties, animationProperties);\n    }\n\n    return animationProperties;\n  }, [animationProperties]);\n  var _properties = properties[checked ? 'dark' : 'light'],\n      circle = _properties.circle,\n      svg = _properties.svg,\n      lines = _properties.lines,\n      mask = _properties.mask;\n  var svgContainerProps = reactSpring.useSpring(_extends({}, svg, {\n    config: animationProperties.springConfig\n  }));\n  var centerCircleProps = reactSpring.useSpring(_extends({}, circle, {\n    config: animationProperties.springConfig\n  }));\n  var maskedCircleProps = reactSpring.useSpring(_extends({}, mask, {\n    config: animationProperties.springConfig\n  }));\n  var linesProps = reactSpring.useSpring(_extends({}, lines, {\n    config: animationProperties.springConfig\n  }));\n\n  var toggle = function toggle() {\n    return onChange(!checked);\n  };\n\n  var uniqueMaskId = \"circle-mask-\" + id;\n  return React.createElement(reactSpring.animated.svg, Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    color: checked ? moonColor : sunColor,\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    stroke: \"currentColor\",\n    onClick: toggle,\n    style: _extends({\n      cursor: 'pointer'\n    }, svgContainerProps, style)\n  }, rest), React.createElement(\"mask\", {\n    id: uniqueMaskId\n  }, React.createElement(\"rect\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"white\"\n  }), React.createElement(reactSpring.animated.circle // @ts-ignore\n  , {\n    // @ts-ignore\n    style: maskedCircleProps,\n    r: \"9\",\n    fill: \"black\"\n  })), React.createElement(reactSpring.animated.circle, {\n    cx: \"12\",\n    cy: \"12\",\n    fill: checked ? moonColor : sunColor,\n    // @ts-ignore\n    style: centerCircleProps,\n    mask: \"url(#\" + uniqueMaskId + \")\"\n  }), React.createElement(reactSpring.animated.g, {\n    stroke: \"currentColor\",\n    style: linesProps\n  }, React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"1\",\n    x2: \"12\",\n    y2: \"3\"\n  }), React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"21\",\n    x2: \"12\",\n    y2: \"23\"\n  }), React.createElement(\"line\", {\n    x1: \"4.22\",\n    y1: \"4.22\",\n    x2: \"5.64\",\n    y2: \"5.64\"\n  }), React.createElement(\"line\", {\n    x1: \"18.36\",\n    y1: \"18.36\",\n    x2: \"19.78\",\n    y2: \"19.78\"\n  }), React.createElement(\"line\", {\n    x1: \"1\",\n    y1: \"12\",\n    x2: \"3\",\n    y2: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"21\",\n    y1: \"12\",\n    x2: \"23\",\n    y2: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"4.22\",\n    y1: \"19.78\",\n    x2: \"5.64\",\n    y2: \"18.36\"\n  }), React.createElement(\"line\", {\n    x1: \"18.36\",\n    y1: \"5.64\",\n    x2: \"19.78\",\n    y2: \"4.22\"\n  })));\n};\n\nexports.DarkModeSwitch = DarkModeSwitch;\nexports.defaultProperties = defaultProperties;","map":{"version":3,"sources":["../src/index.tsx"],"names":["defaultProperties","dark","circle","r","mask","cx","cy","svg","transform","lines","opacity","light","springConfig","mass","tension","friction","REACT_TOGGLE_DARK_MODE_GLOBAL_ID","DarkModeSwitch","onChange","checked","size","animationProperties","moonColor","sunColor","style","rest","id","setId","React","properties","Object","svgContainerProps","useSpring","config","centerCircleProps","maskedCircleProps","linesProps","toggle","uniqueMaskId","animated","xmlns","width","height","viewBox","color","fill","strokeWidth","strokeLinecap","strokeLinejoin","stroke","onClick","cursor","x","y","x1","y1","x2","y2"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nexport const defaultProperties = {\n  dark: {\n    circle: {\n      r: 9,\n    },\n    mask: {\n      cx: '50%',\n      cy: '23%',\n    },\n    svg: {\n      transform: 'rotate(40deg)',\n    },\n    lines: {\n      opacity: 0,\n    },\n  },\n  light: {\n    circle: {\n      r: 5,\n    },\n    mask: {\n      cx: '100%',\n      cy: '0%',\n    },\n    svg: {\n      transform: 'rotate(90deg)',\n    },\n    lines: {\n      opacity: 1,\n    },\n  },\n  springConfig: { mass: 4, tension: 250, friction: 35 },\n};\n\nlet REACT_TOGGLE_DARK_MODE_GLOBAL_ID = 0;\n\ntype SVGProps = Omit<React.HTMLAttributes<HTMLOrSVGElement>, 'onChange'>;\ninterface Props extends SVGProps {\n  onChange: (checked: boolean) => void;\n  checked: boolean;\n  style?: React.CSSProperties;\n  size?: number;\n  animationProperties?: typeof defaultProperties;\n  moonColor?: string;\n  sunColor?: string;\n}\n\nexport const DarkModeSwitch: React.FC<Props> = ({\n  onChange,\n  children,\n  checked = false,\n  size = 24,\n  animationProperties = defaultProperties,\n  moonColor = 'white',\n  sunColor = 'black',\n  style,\n  ...rest\n}) => {\n  const [id, setId] = React.useState(0);\n\n  React.useEffect(() => {\n    REACT_TOGGLE_DARK_MODE_GLOBAL_ID += 1;\n    setId(REACT_TOGGLE_DARK_MODE_GLOBAL_ID);\n  }, [setId]);\n\n  const properties = React.useMemo(() => {\n    if (animationProperties !== defaultProperties) {\n      return Object.assign(defaultProperties, animationProperties);\n    }\n\n    return animationProperties;\n  }, [animationProperties]);\n\n  const { circle, svg, lines, mask } = properties[checked ? 'dark' : 'light'];\n\n  const svgContainerProps = useSpring({\n    ...svg,\n    config: animationProperties.springConfig,\n  });\n  const centerCircleProps = useSpring({\n    ...circle,\n    config: animationProperties.springConfig,\n  });\n  const maskedCircleProps = useSpring({\n    ...mask,\n    config: animationProperties.springConfig,\n  });\n  const linesProps = useSpring({\n    ...lines,\n    config: animationProperties.springConfig,\n  });\n\n  const toggle = () => onChange(!checked);\n\n  const uniqueMaskId = `circle-mask-${id}`;\n\n  return (\n    <animated.svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      color={checked ? moonColor : sunColor}\n      fill=\"none\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      stroke=\"currentColor\"\n      onClick={toggle}\n      style={{\n        cursor: 'pointer',\n        ...svgContainerProps,\n        ...style,\n      }}\n      {...rest}\n    >\n      <mask id={uniqueMaskId}>\n        <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"white\" />\n        <animated.circle\n          // @ts-ignore\n          style={maskedCircleProps}\n          r=\"9\"\n          fill=\"black\"\n        />\n      </mask>\n\n      <animated.circle\n        cx=\"12\"\n        cy=\"12\"\n        fill={checked ? moonColor : sunColor}\n        // @ts-ignore\n        style={centerCircleProps}\n        mask={`url(#${uniqueMaskId})`}\n      />\n      <animated.g stroke=\"currentColor\" style={linesProps}>\n        <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\" />\n        <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\" />\n        <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\" />\n        <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\" />\n        <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\" />\n        <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\" />\n        <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\" />\n        <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\" />\n      </animated.g>\n    </animated.svg>\n  );\n};\n"]},"metadata":{},"sourceType":"script"}